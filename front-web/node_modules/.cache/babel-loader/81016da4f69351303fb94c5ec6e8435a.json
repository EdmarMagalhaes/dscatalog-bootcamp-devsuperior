{"ast":null,"code":"var _process$env$REACT_AP, _process$env$REACT_AP2;\n\nimport jwtDecode from 'jwt-decode';\nimport history from './history';\nexport const CLIENT_ID = (_process$env$REACT_AP = process.env.REACT_APP_CLIENT_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : 'dscatalog';\nexport const CLIENT_SECRET = (_process$env$REACT_AP2 = process.env.REACT_APP_CLIENT_SECRET) !== null && _process$env$REACT_AP2 !== void 0 ? _process$env$REACT_AP2 : 'dscatalog123';\nexport const saveSessionData = loginResponse => {\n  localStorage.setItem('authData', JSON.stringify(loginResponse));\n};\nexport const getSessionData = () => {\n  const sessionData = localStorage.getItem('authData') || '{}';\n  const parsedSessionData = JSON.parse(sessionData);\n  return parsedSessionData;\n};\nexport const getAccessTokenDecoded = () => {\n  const sessionData = getSessionData();\n\n  try {\n    const tokenDecoded = jwtDecode(sessionData.access_token);\n    return tokenDecoded;\n  } catch (error) {\n    return {};\n  }\n};\nexport const isTokenValid = () => {\n  const {\n    exp\n  } = getAccessTokenDecoded();\n  return Date.now() <= exp * 1000;\n};\nexport const isAuthenticated = () => {\n  const sessionData = getSessionData();\n  return sessionData.access_token && isTokenValid();\n};\nexport const isAllowedByRole = function () {\n  let routeRoles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if (routeRoles.length === 0) {\n    return true;\n  }\n\n  const {\n    authorities\n  } = getAccessTokenDecoded();\n  return routeRoles.some(role => authorities === null || authorities === void 0 ? void 0 : authorities.includes(role));\n};\nexport const logout = () => {\n  localStorage.removeItem('authData');\n  history.replace('/auth/login');\n};","map":{"version":3,"sources":["C:/projetos/dscatalog-bootcamp-devsuperior/front-web/src/core/utils/auth.ts"],"names":["jwtDecode","history","CLIENT_ID","process","env","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","saveSessionData","loginResponse","localStorage","setItem","JSON","stringify","getSessionData","sessionData","getItem","parsedSessionData","parse","getAccessTokenDecoded","tokenDecoded","access_token","error","isTokenValid","exp","Date","now","isAuthenticated","isAllowedByRole","routeRoles","length","authorities","some","role","includes","logout","removeItem","replace"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,MAAMC,SAAS,4BAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAf,yEAAsC,WAArD;AACP,OAAO,MAAMC,aAAa,6BAAGH,OAAO,CAACC,GAAR,CAAYG,uBAAf,2EAA0C,cAA7D;AAmBP,OAAO,MAAMC,eAAe,GAAIC,aAAD,IAAkC;AAC/DC,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeJ,aAAf,CAAjC;AACD,CAFM;AAIP,OAAO,MAAMK,cAAc,GAAG,MAAM;AAClC,QAAMC,WAAW,GAAGL,YAAY,CAACM,OAAb,CAAqB,UAArB,KAAoC,IAAxD;AACA,QAAMC,iBAAiB,GAAGL,IAAI,CAACM,KAAL,CAAWH,WAAX,CAA1B;AAEA,SAAOE,iBAAP;AACD,CALM;AAOP,OAAO,MAAME,qBAAqB,GAAG,MAAM;AACzC,QAAMJ,WAAW,GAAGD,cAAc,EAAlC;;AAEA,MAAI;AACF,UAAMM,YAAY,GAAGpB,SAAS,CAACe,WAAW,CAACM,YAAb,CAA9B;AACA,WAAOD,YAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,WAAO,EAAP;AACD;AACF,CATM;AAWP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAUL,qBAAqB,EAArC;AAEA,SAAOM,IAAI,CAACC,GAAL,MAAcF,GAAG,GAAG,IAA3B;AACD,CAJM;AAMP,OAAO,MAAMG,eAAe,GAAG,MAAM;AACnC,QAAMZ,WAAW,GAAGD,cAAc,EAAlC;AAEA,SAAOC,WAAW,CAACM,YAAZ,IAA4BE,YAAY,EAA/C;AACD,CAJM;AAMP,OAAO,MAAMK,eAAe,GAAG,YAA6B;AAAA,MAA5BC,UAA4B,uEAAP,EAAO;;AAC1D,MAAIA,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA8B;AAC5B,WAAO,IAAP;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAkBZ,qBAAqB,EAA7C;AAEA,SAAOU,UAAU,CAACG,IAAX,CAAgBC,IAAI,IAAIF,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAEG,QAAb,CAAsBD,IAAtB,CAAxB,CAAP;AACD,CARM;AAUP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1BzB,EAAAA,YAAY,CAAC0B,UAAb,CAAwB,UAAxB;AACAnC,EAAAA,OAAO,CAACoC,OAAR,CAAgB,aAAhB;AACD,CAHM","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport history from './history';\r\n\r\nexport const CLIENT_ID = process.env.REACT_APP_CLIENT_ID ?? 'dscatalog';\r\nexport const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET ?? 'dscatalog123';\r\n\r\ntype LoginResponse = {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  scope: string;\r\n  userFirstName: string;\r\n  userId: number;\r\n}\r\n\r\nexport type Role = 'ROLE_OPERATOR' | 'ROLE_ADMIN';\r\n\r\ntype AccessToken = {\r\n  exp: number;\r\n  user_name: string;\r\n  authorities: Role[];\r\n}\r\n\r\nexport const saveSessionData = (loginResponse: LoginResponse) => {\r\n  localStorage.setItem('authData', JSON.stringify(loginResponse));\r\n}\r\n\r\nexport const getSessionData = () => {\r\n  const sessionData = localStorage.getItem('authData') || '{}';\r\n  const parsedSessionData = JSON.parse(sessionData);\r\n\r\n  return parsedSessionData as LoginResponse;\r\n}\r\n\r\nexport const getAccessTokenDecoded = () => {\r\n  const sessionData = getSessionData();\r\n\r\n  try {\r\n    const tokenDecoded = jwtDecode(sessionData.access_token);\r\n    return tokenDecoded as AccessToken;\r\n  } catch (error) {\r\n    return {} as AccessToken;\r\n  }\r\n}\r\n\r\nexport const isTokenValid = () => {\r\n  const { exp } = getAccessTokenDecoded();\r\n  \r\n  return Date.now() <= exp * 1000;\r\n}\r\n\r\nexport const isAuthenticated = () => {\r\n  const sessionData = getSessionData();\r\n\r\n  return sessionData.access_token && isTokenValid();\r\n}\r\n\r\nexport const isAllowedByRole = (routeRoles: Role[] = []) => {\r\n  if (routeRoles.length === 0 ) {\r\n    return true;\r\n  }\r\n\r\n  const { authorities } = getAccessTokenDecoded();\r\n\r\n  return routeRoles.some(role => authorities?.includes(role));\r\n}\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem('authData');\r\n  history.replace('/auth/login');\r\n}"]},"metadata":{},"sourceType":"module"}