{"ast":null,"code":"var _jsxFileName = \"C:\\\\projetos\\\\dscatalog-bootcamp-devsuperior\\\\front-web\\\\src\\\\core\\\\components\\\\Routes\\\\PrivateRoute.tsx\";\nimport React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { isAllowedByRole, isAuthenticated } from 'core/utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = _ref => {\n  let {\n    children,\n    path,\n    allowedRoutes\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    render: _ref2 => {\n      let {\n        location\n      } = _ref2;\n\n      if (!isAuthenticated()) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: \"/auth/login\",\n            state: {\n              from: location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this);\n      } else if (isAuthenticated() && !isAllowedByRole(allowedRoutes)) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: \"/admin\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this);\n      }\n\n      return children;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/projetos/dscatalog-bootcamp-devsuperior/front-web/src/core/components/Routes/PrivateRoute.tsx"],"names":["React","Redirect","Route","isAllowedByRole","isAuthenticated","PrivateRoute","children","path","allowedRoutes","location","pathname","state","from"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAuD,iBAAvD;;;AAQA,MAAMC,YAAY,GAAG,QAA8C;AAAA,MAA7C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,GAA6C;AACjE,sBACE,QAAC,KAAD;AACE,IAAA,IAAI,EAAED,IADR;AAEE,IAAA,MAAM,EAAE,SAAkB;AAAA,UAAjB;AAAEE,QAAAA;AAAF,OAAiB;;AACxB,UAAI,CAACL,eAAe,EAApB,EAAwB;AACtB,4BACE,QAAC,QAAD;AACE,UAAA,EAAE,EAAE;AACFM,YAAAA,QAAQ,EAAE,aADR;AAEFC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEH;AAAR;AAFL;AADN;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATD,MASO,IAAIL,eAAe,MAAM,CAACD,eAAe,CAACK,aAAD,CAAzC,EAA0D;AAC/D,4BACE,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEE,YAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,gBADF;AAGD;;AAED,aAAOJ,QAAP;AACD;AAnBH;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAxBD;;KAAMD,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { isAllowedByRole, isAuthenticated, Role } from 'core/utils/auth';\r\n\r\ntype Props = {\r\n  children: React.ReactNode;\r\n  path: string;\r\n  allowedRoutes?: Role[];\r\n}\r\n\r\nconst PrivateRoute = ({ children, path, allowedRoutes }: Props) => {\r\n  return (\r\n    <Route\r\n      path={path}\r\n      render={({ location }) => {\r\n        if (!isAuthenticated()) {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/auth/login\",\r\n                state: { from: location }\r\n              }}\r\n            />\r\n          )\r\n        } else if (isAuthenticated() && !isAllowedByRole(allowedRoutes)) {\r\n          return (\r\n            <Redirect to={{ pathname: \"/admin\" }} />\r\n          )\r\n        }\r\n\r\n        return children;\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n"]},"metadata":{},"sourceType":"module"}