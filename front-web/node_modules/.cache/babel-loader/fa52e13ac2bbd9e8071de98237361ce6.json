{"ast":null,"code":"var _process$env$REACT_AP;\n\nimport axios from 'axios';\nimport qs from 'qs';\nimport { CLIENT_ID, CLIENT_SECRET, getSessionData, logout } from './auth';\nconst BASE_URL = (_process$env$REACT_AP = process.env.REACT_APP_BACKEND_URL) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : 'https://nelio-dscatalog.herokuapp.com';\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response.status === 401) {\n    logout();\n  }\n\n  return Promise.reject(error);\n});\nexport const makeRequest = params => {\n  return axios({ ...params,\n    baseURL: BASE_URL\n  });\n};\nexport const makePrivateRequest = params => {\n  const sessionData = getSessionData();\n  const headers = {\n    'Authorization': `Bearer ${sessionData.access_token}`\n  };\n  return makeRequest({ ...params,\n    headers\n  });\n};\nexport const makeLogin = loginData => {\n  const token = `${CLIENT_ID}:${CLIENT_SECRET}`;\n  const headers = {\n    Authorization: `Basic ${window.btoa(token)}`,\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  const payload = qs.stringify({ ...loginData,\n    grant_type: 'password'\n  });\n  return makeRequest({\n    url: '/oauth/token',\n    data: payload,\n    method: 'POST',\n    headers\n  });\n};","map":{"version":3,"sources":["C:/projetos/dscatalog-bootcamp-devsuperior/front-web/src/core/utils/request.ts"],"names":["axios","qs","CLIENT_ID","CLIENT_SECRET","getSessionData","logout","BASE_URL","process","env","REACT_APP_BACKEND_URL","interceptors","response","use","error","status","Promise","reject","makeRequest","params","baseURL","makePrivateRequest","sessionData","headers","access_token","makeLogin","loginData","token","Authorization","window","btoa","payload","stringify","grant_type","url","data","method"],"mappings":";;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,cAAnC,EAAmDC,MAAnD,QAAiE,QAAjE;AAOA,MAAMC,QAAQ,4BAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAf,yEAAwC,uCAAtD;AAEAT,KAAK,CAACU,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,UAAUD,QAAV,EAAoB;AAClD,SAAOA,QAAP;AACD,CAFD,EAEG,UAAUE,KAAV,EAAiB;AAClB,MAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACjCT,IAAAA,MAAM;AACP;;AAED,SAAOU,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CARD;AAUA,OAAO,MAAMI,WAAW,GAAIC,MAAD,IAAgC;AACzD,SAAOlB,KAAK,CAAC,EACX,GAAGkB,MADQ;AAEXC,IAAAA,OAAO,EAAEb;AAFE,GAAD,CAAZ;AAID,CALM;AAOP,OAAO,MAAMc,kBAAkB,GAAIF,MAAD,IAAgC;AAChE,QAAMG,WAAW,GAAGjB,cAAc,EAAlC;AAEA,QAAMkB,OAAO,GAAG;AACd,qBAAkB,UAASD,WAAW,CAACE,YAAa;AADtC,GAAhB;AAIA,SAAON,WAAW,CAAC,EAAE,GAAGC,MAAL;AAAaI,IAAAA;AAAb,GAAD,CAAlB;AACD,CARM;AAUP,OAAO,MAAME,SAAS,GAAIC,SAAD,IAA0B;AACjD,QAAMC,KAAK,GAAI,GAAExB,SAAU,IAAGC,aAAc,EAA5C;AAEA,QAAMmB,OAAO,GAAG;AACdK,IAAAA,aAAa,EAAG,SAAQC,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAmB,EAD7B;AAEd,oBAAgB;AAFF,GAAhB;AAKA,QAAMI,OAAO,GAAG7B,EAAE,CAAC8B,SAAH,CAAa,EAAE,GAAGN,SAAL;AAAgBO,IAAAA,UAAU,EAAE;AAA5B,GAAb,CAAhB;AAEA,SAAOf,WAAW,CAAC;AAAEgB,IAAAA,GAAG,EAAE,cAAP;AAAuBC,IAAAA,IAAI,EAAEJ,OAA7B;AAAsCK,IAAAA,MAAM,EAAE,MAA9C;AAAsDb,IAAAA;AAAtD,GAAD,CAAlB;AACD,CAXM","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\r\nimport qs from 'qs';\r\nimport { CLIENT_ID, CLIENT_SECRET, getSessionData, logout } from './auth';\r\n\r\ntype LoginData = {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nconst BASE_URL = process.env.REACT_APP_BACKEND_URL ?? 'https://nelio-dscatalog.herokuapp.com';\r\n\r\naxios.interceptors.response.use(function (response) {\r\n  return response;\r\n}, function (error) {\r\n  if (error.response.status === 401) {\r\n    logout();\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport const makeRequest = (params: AxiosRequestConfig) => {\r\n  return axios({\r\n    ...params,\r\n    baseURL: BASE_URL\r\n  });\r\n}\r\n\r\nexport const makePrivateRequest = (params: AxiosRequestConfig) => {\r\n  const sessionData = getSessionData();\r\n\r\n  const headers = {\r\n    'Authorization': `Bearer ${sessionData.access_token}`\r\n  }\r\n\r\n  return makeRequest({ ...params, headers });\r\n}\r\n\r\nexport const makeLogin = (loginData: LoginData) => {\r\n  const token = `${CLIENT_ID}:${CLIENT_SECRET}`;\r\n\r\n  const headers = {\r\n    Authorization: `Basic ${window.btoa(token)}`,\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n  }\r\n\r\n  const payload = qs.stringify({ ...loginData, grant_type: 'password' });\r\n\r\n  return makeRequest({ url: '/oauth/token', data: payload, method: 'POST', headers });\r\n}"]},"metadata":{},"sourceType":"module"}